<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        iv+qe5T/4cK2//vny//858z//OfM//znzP/858z//OfM//znzP/75cn/+uTF//rjxf/GoqT/on2J/6C7
        aP+hv2b/n4CE/aBvi2MAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJJtkgegcYv2oLFs/6G/
        Zv+pw27/+uXJ//Tdx//23sT/++XG//vnzP/858z//OfM//znzP/858z//OfM//znzP/75cj/+uTF//rj
        xf+3j5v/opJ9/6G/Zv+hr27/n3GK9ZlmmQUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAn2uNSqGA
        hfuhv2b/oLhp/7ialf/t1ML//OfM//vny//75cb/++TG//vny//858z//OfM//znzP/858z//OfM//zn
        zP/75cn/+uTF//HZwP+ico7/oLZq/6G/Zv+gfoX7nmyMRwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AACfc4utoJx2/6G/Zv+lv2v/zKqo/9Ovrf/758z//OfM//vny//75cb/++TG//vny//858z//OfM//zn
        zP/858z//OfM//znzP/75cn/+uTF/8CaoP+hlnr/ob9m/6Cbdv+fcomqAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAKF3iOahrW7/ob9m/8bPjv/75sv/++TF//rlxv/858z//OfM//vmy//75Mb/++XG//vn
        y//858z//OfM//znzP/858z//OfM//znzP/75cj/4cS2/6WEif+hv2b/oa1v/6B3iOQAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAoHCL+aG6af+hv2b/19ah//znzP/758v/++TG//vlxv/758v//OfM//vn
        y//z3Mr/z7PY//Pdzv/858z//OfM//znzP/858z//OfM//znzP/75cn/wcaM/6G/Zv+humn/n3CL+QAA
        AAAAAAAAAAAAAAAAAACfa4zYn2yN/59sjf+fbI3/n2yN/59sjf+fbI3/n2yN/9y9tv/758v/++TG//vl
        xv/758v//OfM/8+12v+ZeO3/0LTX//vmy//858z//OfM//znzP/858z/3Ly3/59sjf+fbI3/n2yN/59s
        jf+fbI3/n2yN/59sjf+fbI3XAAAAAAAAAAAAAAAAAAAAAJ9ujfWuxHP/r8py/87VlP/65MX/++bJ//zn
        zP/75sv/++TF//vkx//858z/9N7P/8+02v/z28n/++XG//vny//858z//OfM//znzP/858z//OfM/+Hc
        q/+vynL/rsR0/59ujfUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoXKM26y4d/+vynL/rZKK/+bJ
        uf/65MX/++bI//znzP/758v/++XG//vlxv/758v//OfM//vny//75Mb/++TG//vmy//858z//OfM//zn
        zP/ozL7/sJOR/6/Kcv+stnj/oHOL2gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACfcoyoqaN9/q/K
        cv+pm4H/xaCk//rkxf/65MX/++XJ//znzP/758v/++XG//vlxv/758v//OfM//vny//75Mb/++TG//vm
        y//858z//OfM/8WgqP+qnYH/r8py/6iiff6fcYulAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJ5r
        jk+jgYbwr8py/62+df+jdI7/89vB//rkxf/65MX/++XJ//znzP/758v/++XG//vlxv/758v//OfM//vn
        y//75Mb/++TG//vmy//z3Mf/pXSQ/62/dv+vynL/o4CI8J5rjUwAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAkm2SB59wi/CsvHf/r8py/6mXhP+7lJ3/+uTF//rkxf/65MX/++bI//znzP/75sv/++TG//vk
        x//858z//OfM//vmy//75MX/++TG/72Vof+qlYb/r8py/6y7dv+gcIzvmWaZBQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAoG6MdqSGhfOvynL/r8dz/6WBi//Kp6b/+uTF//rkxf/65MX/++XI//zn
        zP/758v/++XG//vkxv/758v//OfM//vmy//Jpaf/poKL/6/Hc/+vynL/pIWG86FujXIAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACqgIAGoHCL4qmkffyvynL/rsJ1/6aAi/+9lZ7/9NzB//rk
        xf/65MX/++bJ/9q6tf/758v/++XG//vkxv/758v/yaSp/6mFjv+uw3X/r8py/6ihfPygcYzemWaZBQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACdb5AnoHCN8auvef+vynL/rsZ0/6iV
        hP+kdY7/w5+i/+THuP/65MX/n2yN//znzP/kyb3/yqen/9TOn/+0vX7/rsdz/6/Kcv+qrnr/oG+M8Zxq
        jiQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACfbY49n3CM8qei
        ff2vynL/r8py/62/df+nnYD/qoyL/8zVkv+fbI3/2tmj/66Nj/+onIH/rsV0/6/Kcv+vynL/p6J+/Z9w
        jPKgbI87AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AACha40mn3CM4KKEhvKtu3b/r8py/6/Kcv+vynL/r8py/59sjf+vynL/r8py/6/Kcv+vynL/rLt2/6OD
        h/Kgb4zenGqOJAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAACSbZIHnmyMdqBvjPOjgIbvqKR9/ay2eP+uwXX/n2yN/67Bdf+stnj/qKN+/aKA
        iO+gb4zzoG2Oc6qAgAYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmWaZCp5tjFShb4ytoHGL2p9wjPCfbI3/n3CM8KBz
        i9qgb4usoGyNU6pxjgkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJ9s
        jf8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAn2yN/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAACfbI3UAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////v////7////+////8B///8AH//8AAf/+AAD//AAAf/gA
        AD/4AAA/8AAAH/AAAB/gAAAP4AAAD+AAAA8AAAAB4AAAD+AAAA/gAAAP8AAAH/AAAB/4AAA/+AAAP/wA
        AH/+AAD//wAB///AB///8B////7////+/////v//
</value>
  </data>
</root>